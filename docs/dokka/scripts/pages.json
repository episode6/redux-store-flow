[{"name":"abstract fun CoroutineScope.interfere(store: StoreFlow<State>, next: Dispatch): Dispatch","description":"com.episode6.redux.Middleware.interfere","location":"core/com.episode6.redux/-middleware/interfere.html","searchKeys":["interfere","abstract fun CoroutineScope.interfere(store: StoreFlow<State>, next: Dispatch): Dispatch","com.episode6.redux.Middleware.interfere"]},{"name":"abstract fun dispatch(action: Action)","description":"com.episode6.redux.StoreFlow.dispatch","location":"core/com.episode6.redux/-store-flow/dispatch.html","searchKeys":["dispatch","abstract fun dispatch(action: Action)","com.episode6.redux.StoreFlow.dispatch"]},{"name":"abstract val initialState: State","description":"com.episode6.redux.StoreFlow.initialState","location":"core/com.episode6.redux/-store-flow/initial-state.html","searchKeys":["initialState","abstract val initialState: State","com.episode6.redux.StoreFlow.initialState"]},{"name":"abstract val state: State","description":"com.episode6.redux.StoreFlow.state","location":"core/com.episode6.redux/-store-flow/state.html","searchKeys":["state","abstract val state: State","com.episode6.redux.StoreFlow.state"]},{"name":"fun <State> StoreFlow(scope: CoroutineScope, initialValue: State, reducer: Reducer<State>, middlewares: List<Middleware<State>> = emptyList()): StoreFlow<State>","description":"com.episode6.redux.StoreFlow","location":"core/com.episode6.redux/-store-flow.html","searchKeys":["StoreFlow","fun <State> StoreFlow(scope: CoroutineScope, initialValue: State, reducer: Reducer<State>, middlewares: List<Middleware<State>> = emptyList()): StoreFlow<State>","com.episode6.redux.StoreFlow"]},{"name":"fun <T, R> StoreFlow<T>.mapStore(mapper: (T) -> R): StoreFlow<R>","description":"com.episode6.redux.mapStore","location":"core/com.episode6.redux/map-store.html","searchKeys":["mapStore","fun <T, R> StoreFlow<T>.mapStore(mapper: (T) -> R): StoreFlow<R>","com.episode6.redux.mapStore"]},{"name":"fun interface Middleware<State>","description":"com.episode6.redux.Middleware","location":"core/com.episode6.redux/-middleware/index.html","searchKeys":["Middleware","fun interface Middleware<State>","com.episode6.redux.Middleware"]},{"name":"interface Action","description":"com.episode6.redux.Action","location":"core/com.episode6.redux/-action/index.html","searchKeys":["Action","interface Action","com.episode6.redux.Action"]},{"name":"interface StoreFlow<State> : Flow<State> ","description":"com.episode6.redux.StoreFlow","location":"core/com.episode6.redux/-store-flow/index.html","searchKeys":["StoreFlow","interface StoreFlow<State> : Flow<State> ","com.episode6.redux.StoreFlow"]},{"name":"abstract fun SideEffectContext<State>.act(): Flow<Action>","description":"com.episode6.redux.sideeffects.SideEffect.act","location":"side-effects/com.episode6.redux.sideeffects/-side-effect/act.html","searchKeys":["act","abstract fun SideEffectContext<State>.act(): Flow<Action>","com.episode6.redux.sideeffects.SideEffect.act"]},{"name":"abstract suspend fun currentState(): State","description":"com.episode6.redux.sideeffects.SideEffectContext.currentState","location":"side-effects/com.episode6.redux.sideeffects/-side-effect-context/current-state.html","searchKeys":["currentState","abstract suspend fun currentState(): State","com.episode6.redux.sideeffects.SideEffectContext.currentState"]},{"name":"abstract val actions: Flow<Action>","description":"com.episode6.redux.sideeffects.SideEffectContext.actions","location":"side-effects/com.episode6.redux.sideeffects/-side-effect-context/actions.html","searchKeys":["actions","abstract val actions: Flow<Action>","com.episode6.redux.sideeffects.SideEffectContext.actions"]},{"name":"fun <State> SideEffectMiddleware(sideEffects: Collection<SideEffect<State>>): Middleware<State>","description":"com.episode6.redux.sideeffects.SideEffectMiddleware","location":"side-effects/com.episode6.redux.sideeffects/-side-effect-middleware.html","searchKeys":["SideEffectMiddleware","fun <State> SideEffectMiddleware(sideEffects: Collection<SideEffect<State>>): Middleware<State>","com.episode6.redux.sideeffects.SideEffectMiddleware"]},{"name":"fun <State> SideEffectMiddleware(vararg sideEffects: SideEffect<State>): Middleware<State>","description":"com.episode6.redux.sideeffects.SideEffectMiddleware","location":"side-effects/com.episode6.redux.sideeffects/-side-effect-middleware.html","searchKeys":["SideEffectMiddleware","fun <State> SideEffectMiddleware(vararg sideEffects: SideEffect<State>): Middleware<State>","com.episode6.redux.sideeffects.SideEffectMiddleware"]},{"name":"fun interface SideEffect<State>","description":"com.episode6.redux.sideeffects.SideEffect","location":"side-effects/com.episode6.redux.sideeffects/-side-effect/index.html","searchKeys":["SideEffect","fun interface SideEffect<State>","com.episode6.redux.sideeffects.SideEffect"]},{"name":"interface SideEffectContext<State>","description":"com.episode6.redux.sideeffects.SideEffectContext","location":"side-effects/com.episode6.redux.sideeffects/-side-effect-context/index.html","searchKeys":["SideEffectContext","interface SideEffectContext<State>","com.episode6.redux.sideeffects.SideEffectContext"]},{"name":"data class SubscriberStatusChanged(subscribersActive: Boolean) : Action","description":"com.episode6.redux.subscriberaware.SubscriberStatusChanged","location":"subscriber-aware/com.episode6.redux.subscriberaware/-subscriber-status-changed/index.html","searchKeys":["SubscriberStatusChanged","data class SubscriberStatusChanged(subscribersActive: Boolean) : Action","com.episode6.redux.subscriberaware.SubscriberStatusChanged"]},{"name":"fun <State> SubscriberAwareStoreFlow(scope: CoroutineScope, initialValue: State, reducer: Reducer<State>, middlewares: List<Middleware<State>> = emptyList()): StoreFlow<State>","description":"com.episode6.redux.subscriberaware.SubscriberAwareStoreFlow","location":"subscriber-aware/com.episode6.redux.subscriberaware/-subscriber-aware-store-flow.html","searchKeys":["SubscriberAwareStoreFlow","fun <State> SubscriberAwareStoreFlow(scope: CoroutineScope, initialValue: State, reducer: Reducer<State>, middlewares: List<Middleware<State>> = emptyList()): StoreFlow<State>","com.episode6.redux.subscriberaware.SubscriberAwareStoreFlow"]},{"name":"fun SubscriberStatusChanged(subscribersActive: Boolean = false)","description":"com.episode6.redux.subscriberaware.SubscriberStatusChanged.SubscriberStatusChanged","location":"subscriber-aware/com.episode6.redux.subscriberaware/-subscriber-status-changed/-subscriber-status-changed.html","searchKeys":["SubscriberStatusChanged","fun SubscriberStatusChanged(subscribersActive: Boolean = false)","com.episode6.redux.subscriberaware.SubscriberStatusChanged.SubscriberStatusChanged"]},{"name":"val subscribersActive: Boolean = false","description":"com.episode6.redux.subscriberaware.SubscriberStatusChanged.subscribersActive","location":"subscriber-aware/com.episode6.redux.subscriberaware/-subscriber-status-changed/subscribers-active.html","searchKeys":["subscribersActive","val subscribersActive: Boolean = false","com.episode6.redux.subscriberaware.SubscriberStatusChanged.subscribersActive"]}]